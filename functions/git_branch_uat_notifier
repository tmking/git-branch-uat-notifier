list_uat_merges() {
  local branch_name current_branch
  current_branch=$(git rev-parse --abbrev-ref HEAD)
  target_branch=${1:-$current_branch}

  git log $uat_branch --merges --pretty=format:"%h%x09%an%x09%ad%x09%s" | head -n ${2:-10} | grep $target_branch | while read ref first_name last_name day month date time year other; do
  truncated_branch_name=$(print -P "%18>>$target_branch")
    echo "\033[0;32m$truncated_branch_name\033[0m merged into $uat_branch on \033[1;34m$day $month $date\033[0m by \033[0;32m$first_name\033[0m (\033[0;33m$ref\033[0m)"
  done
}

uat_contains_current_commit() {
  local current_commit
  current_commit=$(git rev-parse $1)
  if git branch --contains $current_commit | grep -q $uat_branch; then
    echo "\033[0;32m$1 is up to date with $uat_branch!\033[0m"
  else
    echo "\033[1;31m$1 is out of sync with $uat_branch!\033[0m"
  fi
}

process_uat_branch() {
  git branch | grep feature | grep -v '*' | while read branch_name; do
    uat_contains_current_commit $branch_name
  done
}

process_other_branch() {
  local first_argument branch
  first_argument=$1
  branch=$2

  case $first_argument in
    co|checkout)
      git branch | grep -q $branch || return
      list_uat_merges $branch
      uat_contains_current_commit $branch
      ;;
    pull|fetch)
      [[ -n "$branch" ]] && uat_contains_current_commit $branch
      ;;
    *)
      return
  esac
}

preexec() {
  [[ -d "$PWD/.git" ]] || return
  git branch | grep -q $uat_branch || return

  export uat_branch=${UAT_BRANCH_NAME:-uat}

  echo "${1}" | while read command first_argument branch other_arguments; do
    case $first_argument in
      *co*|checkout|pull|fetch|push)
        case $branch in
          $uat_branch)
            process_uat_branch
            ;;
          *)
            process_other_branch $first_argument $branch
        esac
        ;;
      *)
        return
    esac
  done
}

eval "$(functions prexec)"
